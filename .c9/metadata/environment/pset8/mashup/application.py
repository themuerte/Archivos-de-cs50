{"changed":false,"filter":false,"title":"application.py","tooltip":"/pset8/mashup/application.py","value":"import os\nimport re\nfrom flask import Flask, jsonify, render_template, request\n\nfrom cs50 import SQL\nfrom helpers import lookup\n\n# Configure application\napp = Flask(__name__)\n\n# Configure CS50 Library to use SQLite database\ndb = SQL(\"sqlite:///mashup.db\")\n\n\n# Ensure responses aren't cached\n@app.after_request\ndef after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response\n\n\n@app.route(\"/\")\ndef index():\n    \"\"\"Render map\"\"\"\n    if not os.environ.get(\"API_KEY\"):\n        raise RuntimeError(\"API_KEY not set\")\n    return render_template(\"index.html\", key=os.environ.get(\"API_KEY\"))\n\n\n@app.route(\"/articles\")\ndef articles():\n    \"\"\"Look up articles for geo\"\"\"\n\n    # TODO\n    return jsonify([])\n\n\n@app.route(\"/search\")\ndef search():\n    \"\"\"Search for places that match query\"\"\"\n\n    # TODO\n    return jsonify([])\n\n\n@app.route(\"/update\")\ndef update():\n    \"\"\"Find up to 10 places within view\"\"\"\n\n    # Ensure parameters are present\n    if not request.args.get(\"sw\"):\n        raise RuntimeError(\"missing sw\")\n    if not request.args.get(\"ne\"):\n        raise RuntimeError(\"missing ne\")\n\n    # Ensure parameters are in lat,lng format\n    if not re.search(\"^-?\\d+(?:\\.\\d+)?,-?\\d+(?:\\.\\d+)?$\", request.args.get(\"sw\")):\n        raise RuntimeError(\"invalid sw\")\n    if not re.search(\"^-?\\d+(?:\\.\\d+)?,-?\\d+(?:\\.\\d+)?$\", request.args.get(\"ne\")):\n        raise RuntimeError(\"invalid ne\")\n\n    # Explode southwest corner into two variables\n    sw_lat, sw_lng = map(float, request.args.get(\"sw\").split(\",\"))\n\n    # Explode northeast corner into two variables\n    ne_lat, ne_lng = map(float, request.args.get(\"ne\").split(\",\"))\n\n    # Find 10 cities within view, pseudorandomly chosen if more within view\n    if sw_lng <= ne_lng:\n\n        # Doesn't cross the antimeridian\n        rows = db.execute(\"\"\"SELECT * FROM places\n                          WHERE :sw_lat <= latitude AND latitude <= :ne_lat AND (:sw_lng <= longitude AND longitude <= :ne_lng)\n                          GROUP BY country_code, place_name, admin_code1\n                          ORDER BY RANDOM()\n                          LIMIT 10\"\"\",\n                          sw_lat=sw_lat, ne_lat=ne_lat, sw_lng=sw_lng, ne_lng=ne_lng)\n\n    else:\n\n        # Crosses the antimeridian\n        rows = db.execute(\"\"\"SELECT * FROM places\n                          WHERE :sw_lat <= latitude AND latitude <= :ne_lat AND (:sw_lng <= longitude OR longitude <= :ne_lng)\n                          GROUP BY country_code, place_name, admin_code1\n                          ORDER BY RANDOM()\n                          LIMIT 10\"\"\",\n                          sw_lat=sw_lat, ne_lat=ne_lat, sw_lng=sw_lng, ne_lng=ne_lng)\n\n    # Output places as JSON\n    return jsonify(rows)\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":540,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":29,"state":"start","mode":"ace/mode/python"}},"timestamp":1570899131510}